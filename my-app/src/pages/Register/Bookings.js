import React, { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "./Bookings.css";

export default function Booking() {
  const location = useLocation();
  const navigate = useNavigate();
  const studentData = location.state?.student;

  // C√°c state c·∫ßn ƒë·∫∑t ·ªü ƒë·∫ßu component
  const [khu, setKhu] = useState("");
  const [gioiTinh, setGioiTinh] = useState("");
  const [loaiPhong, setLoaiPhong] = useState("");
  // const [nha, setNha] = useState("");
  const [tang, setTang] = useState(1);
  const [selectedRoom, setSelectedRoom] = useState(null);

  const [isSent, setIsSent] = useState(false);

  // D·ªØ li·ªáu m·∫´u
  const data = {
    A: {
      Nam: {
        "Ph√≤ng 6 sinh vi√™n": ["A10", "A11"],
        "Ph√≤ng 4 sinh vi√™n": ["A12"],
      },
      N·ªØ: { "Ph√≤ng 6 sinh vi√™n": ["A12"] },
    },
    B: {
      Nam: { "Ph√≤ng 4 sinh vi√™n": ["B1", "B2"] },
      N·ªØ: { "Ph√≤ng 6 sinh vi√™n": ["B3", "B4"] },
    },
  };

  // Danh s√°ch ph√≤ng t·ª´ng t·∫ßng
  const roomsByFloor = {
    1: [
      { id: "P101", name: "P101", total: 6, used: 5 },
      { id: "P102", name: "P102", total: 6, used: 6 },
      { id: "P103", name: "P103", total: 6, used: 4 },
    ],
    2: [
      { id: "P201", name: "P201", total: 6, used: 6 },
      { id: "P202", name: "P202", total: 6, used: 5 },
      { id: "P203", name: "P203", total: 6, used: 2 },
    ],
    3: [
      { id: "P301", name: "P301", total: 6, used: 3 },
      { id: "P302", name: "P302", total: 6, used: 5 },
      { id: "P303", name: "P303", total: 6, used: 6 },
    ],
    4: [
      { id: "P401", name: "P401", total: 6, used: 4 },
      { id: "P402", name: "P402", total: 6, used: 6 },
      { id: "P403", name: "P403", total: 6, used: 1 },
    ],
  };

  // Khi click v√†o ph√≤ng ‚Üí chuy·ªÉn sang trang chi ti·∫øt
  //L∆∞u gi√° tr·ªã ph√≤ng
  const handleRoomClick = (roomId) => {
    setSelectedRoom(roomId); // ch·ªâ l∆∞u t·∫°m th·ªùi
  };

  // Khi nh·∫•n x√°c nh·∫≠n
  const handleConfirm = () => {
    if (!khu || !loaiPhong || !tang) {
      alert(
        "Vui l√≤ng ch·ªçn ƒë·ªß khu, nh√†, lo·∫°i ph√≤ng v√† t·∫ßng tr∆∞·ªõc khi x√°c nh·∫≠n!"
      );
      return;
    }

    navigate(`/roomdetail/${selectedRoom || "P101"}`, {
      state: {
        bookingInfo: {
          khu,
          gioiTinh,
          loaiPhong,
          // nha,
          tang,
        },
      },
    });
  };

  // Khi thay ƒë·ªïi select
  const handleKhuChange = (e) => {
    setKhu(e.target.value);
    setGioiTinh("");
    setLoaiPhong("");
  };

  const handleGioiTinhChange = (e) => {
    setGioiTinh(e.target.value);
    setLoaiPhong("");
  };

  const handleLoaiPhongChange = (e) => {
    setLoaiPhong(e.target.value);
  };
  const handleSendToAdmin = (student) => {
    if (!student) {
      alert("Kh√¥ng c√≥ th√¥ng tin sinh vi√™n ƒë·ªÉ g·ª≠i!");
      return;
    }

    // Gi·∫£ l·∫≠p g·ª≠i d·ªØ li·ªáu
    console.log("ƒê√£ g·ª≠i th√¥ng tin sinh vi√™n l√™n admin:", student);
    setIsSent(true); // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ g·ª≠i
    alert(`ƒê√£ g·ª≠i ƒëƒÉng k√Ω c·ªßa ${student.fullName} l√™n admin!`);
  };

  const handleDelete = (studentId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒëƒÉng k√Ω n√†y kh√¥ng?")) {
      console.log("ƒê√£ x√≥a sinh vi√™n c√≥ ID:", studentId);
      alert("X√≥a th√†nh c√¥ng!");
      // C√≥ th·ªÉ th√™m code ƒëi·ªÅu h∆∞·ªõng ho·∫∑c x√≥a kh·ªèi state t·∫°i ƒë√¢y
    }
  };

  // Render icon gi∆∞·ªùng
  const getBedIcons = (used, total) => {
    const arr = [];
    for (let i = 0; i < used; i++) {
      arr.push(
        <span key={"r" + i} className="bed red">
          üë§
        </span>
      );
    }
    for (let i = 0; i < total - used; i++) {
      arr.push(
        <span key={"g" + i} className="bed green">
          üßç‚Äç‚ôÇÔ∏è
        </span>
      );
    }
    return arr;
  };

  return (
    <div className="booking-container">
      <h2>Ch·ªçn ph√≤ng k√Ω t√∫c x√°</h2>
      {studentData ? (
        <p className="welcome">
          Xin ch√†o <b>{studentData.fullName}</b> ({studentData.studentId}) ‚Äì{" "}
          {studentData.gender}
        </p>
      ) : (
        <p className="warning">Kh√¥ng c√≥ th√¥ng tin sinh vi√™n!</p>
      )}
      {/* H√†ng ch·ªçn b·ªô l·ªçc */}
      <div className="filter-row">
        <select value={khu} onChange={handleKhuChange}>
          <option value="">-- Ch·ªçn Khu --</option>
          {Object.keys(data).map((k) => (
            <option key={k} value={k}>
              {k}
            </option>
          ))}
        </select>

        <select
          value={gioiTinh}
          onChange={handleGioiTinhChange}
          disabled={!khu}
        >
          <option value="">-- Gi·ªõi t√≠nh --</option>
          {khu &&
            Object.keys(data[khu]).map((g) => (
              <option key={g} value={g}>
                {g}
              </option>
            ))}
        </select>

        <select
          value={loaiPhong}
          onChange={handleLoaiPhongChange}
          disabled={!gioiTinh}
        >
          <option value="">-- Lo·∫°i ph√≤ng --</option>
          {khu &&
            gioiTinh &&
            Object.keys(data[khu][gioiTinh]).map((lp) => (
              <option key={lp} value={lp}>
                {lp}
              </option>
            ))}
        </select>
      </div>
      {/* B·∫£ng hi·ªÉn th·ªã th√¥ng tin sinh vi√™n */}
      {studentData && (
        <table className="student-table">
          <thead>
            <tr>
              <th>M√£ SV</th>
              <th>H·ªç v√† T√™n</th>
              <th>Gi·ªõi t√≠nh</th>
              <th>Ng√†y sinh</th>
              <th>L·ªõp</th>
              <th>Khoa</th>
              <th>Qu√™ Qu√°n</th>
              <th>X√°c Nh·∫≠n</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>{studentData.studentId}</td>
              <td>{studentData.fullName}</td>
              <td>{studentData.gender}</td>
              <td>{studentData.dateOfBirth}</td>
              <td>{studentData.className}</td>
              <td>{studentData.department}</td>
              <td>{studentData.address}</td>
              <td>
                {isSent ? (
                  <span className="sent-status">‚úÖ ƒê√£ g·ª≠i</span>
                ) : (
                  <>
                    <button
                      className="send-btn"
                      onClick={() => handleSendToAdmin(studentData)}
                    >
                      G·ª≠i
                    </button>
                    <button
                      className="delete-btn"
                      onClick={() => handleDelete(studentData.studentId)}
                    >
                      X√≥a
                    </button>
                  </>
                )}
              </td>
            </tr>
          </tbody>
        </table>
      )}
      {studentData && (
        <table className="room-table">
          <thead>
            <tr>
              <th>Khu </th>
              <th>T·∫ßng</th>
              <th>Lo·∫°i ph√≤ng</th>
              <th>Ph√≤ng</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>{studentData.khu}</td>
              <td>{studentData.tang}</td>
              <td>{studentData.loaiPhong}</td>
              <td>{studentData.phong}</td>
            </tr>
          </tbody>
        </table>
      )}
      {/* Khi ƒë√£ ch·ªçn nh√† */}
      {loaiPhong && (
        <>
          <div className="legend">
            <span className="legend-item red">üë§ ƒê√£ c√≥ SV</span>
            <span className="legend-item green">üßç‚Äç‚ôÇÔ∏è C√≤n tr·ªëng</span>
          </div>

          {/* C√°c t·∫ßng hi·ªÉn th·ªã ngang */}
          <div className="floor-tabs">
            {[1, 2, 3, 4].map((f) => (
              <button
                key={f}
                className={tang === f ? "active" : ""}
                onClick={() => setTang(f)}
              >
                T·∫ßng {f}
              </button>
            ))}
          </div>

          {/* Danh s√°ch ph√≤ng */}
          <div className="room-list">
            {roomsByFloor[tang].map((room) => (
              <div
                key={room.id}
                className="room-card"
                onClick={() => handleRoomClick(room.id)}
              >
                <h3>{room.name}</h3>
                <p>
                  Ph√≤ng {room.total} sinh vi√™n <br />
                  <span className="count">
                    C√≤n tr·ªëng: {room.total - room.used}/{room.total}
                  </span>
                </p>
                <div className="beds">{getBedIcons(room.used, room.total)}</div>
              </div>
            ))}
          </div>
          <div className="confirm-btn">
            <button onClick={handleConfirm}>X√°c nh·∫≠n ƒëƒÉng k√Ω</button>
          </div>
        </>
      )}
    </div>
  );
}
